# -*- coding: utf-8 -*-
"""GenAI Career Navigator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E5azOvnnOCcGyadkS0cAjmSNrf_Exq8R
"""

!pip install streamlit openai pymupdf matplotlib

!pip install streamlit pyngrok pymupdf openai matplotlib --quiet

!pip install --upgrade openai

# Commented out IPython magic to ensure Python compatibility.
# %%writefile utils.py
# import fitz  # PyMuPDF
# import re
# import matplotlib.pyplot as plt
# from io import BytesIO
# from openai import OpenAI
# 
# # Initialize OpenAI client
# client = OpenAI(api_key="")
# 
# # PDF text extractor
# def extract_text_from_pdf(file):
#     doc = fitz.open(stream=file.read(), filetype="pdf")
#     return "\n".join([page.get_text() for page in doc])
# 
# # Skill extractor
# def extract_skills_from_resume(resume_text_or_file):
#     if isinstance(resume_text_or_file, BytesIO):
#         text = extract_text_from_pdf(resume_text_or_file)
#     else:
#         text = resume_text_or_file
# 
#     skills = re.findall(r'\b[A-Za-z\+\#]{2,}\b', text)
#     common_skills = {'Python', 'TensorFlow', 'NLP', 'SQL', 'Pandas', 'LLM', 'Prompt', 'GCP', 'Snowflake'}
#     return list(set(skills) & common_skills)
# 
# # Skill recommender
# def get_skill_recommendations(current_skills):
#     prompt = f"My current AI/ML skills are: {', '.join(current_skills)}.\nWhat 5 advanced GenAI or LLM-related skills should I learn next?"
#     response = client.chat.completions.create(
#         model="gpt-3.5-turbo",
#         messages=[
#             {"role": "system", "content": "You are a career coach for AI/ML professionals."},
#             {"role": "user", "content": prompt}
#         ],
#         temperature=0.6,
#         max_tokens=150
#     )
#     content = response.choices[0].message.content
#     return [line.strip("‚Ä¢- ") for line in content.split("\n") if line.strip()]
# 
# # Career Q&A
# def get_career_advice(resume_text, question):
#     prompt = f"My resume:\n{resume_text}\n\nMy question: {question}"
#     response = client.chat.completions.create(
#         model="gpt-4",
#         messages=[
#             {"role": "system", "content": "You are a GenAI Career Coach. Use the resume content and career goals to answer the user's question."},
#             {"role": "user", "content": prompt}
#         ],
#         temperature=0.7,
#         max_tokens=300
#     )
#     return response.choices[0].message.content
# 
# # Plot bar chart
# def plot_skill_chart(current, recommended):
#     all_skills = current + recommended
#     values = [1] * len(current) + [0.5] * len(recommended)
#     fig, ax = plt.subplots()
#     ax.barh(all_skills, values, color=['green']*len(current) + ['orange']*len(recommended))
#     ax.set_xlabel("Skill Importance")
#     ax.set_title("Skill Landscape: Current vs Recommended")
#     return fig
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from utils import (
#     extract_text_from_pdf,
#     extract_skills_from_resume,
#     get_skill_recommendations,
#     get_career_advice,
#     plot_skill_chart
# )
# 
# st.set_page_config(page_title="GenAI Career Navigator", layout="wide")
# st.title("üß≠ GenAI Career Navigator")
# 
# uploaded_file = st.file_uploader("üìÑ Upload your resume (PDF)", type=["pdf"])
# if uploaded_file:
#     # Get resume text
#     resume_text = extract_text_from_pdf(uploaded_file)
# 
#     # Extract skills
#     st.subheader("üîç Extracted Skills")
#     extracted_skills = extract_skills_from_resume(resume_text)
#     st.write(", ".join(extracted_skills) if extracted_skills else "No obvious skills detected.")
# 
#     # Skill recommendations
#     st.subheader("‚ú® GenAI Skill Recommendations")
#     recommended = get_skill_recommendations(extracted_skills)
#     st.write("‚Ä¢ " + "\n‚Ä¢ ".join(recommended) if recommended else "No recommendations available.")
# 
#     # Career advice (optional input)
#     st.subheader("üß† Ask GPT for Career Advice")
#     question = st.text_input("Ask anything about your GenAI career (e.g., 'What roles fit my skills?')")
#     if question:
#         response = get_career_advice(resume_text, question)
#         st.write(response)
# 
#     # Skill chart
#     st.subheader("üìä Career Skill Chart")
#     fig = plot_skill_chart(extracted_skills, recommended)
#     st.pyplot(fig)
#

from pyngrok import ngrok
import threading, time, os

def run_app():
    os.system("streamlit run app.py")

threading.Thread(target=run_app).start()
time.sleep(10)

from pyngrok import ngrok

ngrok.set_auth_token("")

public_url = ngrok.connect(8501)
print("üîó Your app is live at:", public_url)

!pkill -f ngrok

